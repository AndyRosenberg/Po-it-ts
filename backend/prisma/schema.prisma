// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model User {
  @@map("users")
  id String @id @default(cuid())
  username String @unique
  email String @unique
  password String
  profilePic String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resetPasswordToken String? 
  resetPasswordExpires DateTime?

  poems Poem[]
  comments Comment[]
  collections Collection[]
  
  // Self-relation for follows
  following User[] @relation("UserFollows")
  followers User[] @relation("UserFollows")
}

model Poem {
  @@map("poems")
  id String @id @default(cuid())
  title String @default("Untitled Poem")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDraft Boolean @default(true)
  userId String
  user User @relation(fields: [userId], references: [id]) 

  stanzas Stanza[]
}

model Stanza {
  @@map("stanzas")
  id String @id @default(cuid())
  poemId String
  poem Poem @relation(fields: [poemId], references: [id]) 

  body String
  position Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  comments Comment[] @relation("StanzaComments")
}

model Comment {
  @@map("comments")
  id String @id @default(cuid())
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Polymorphic relation fields
  commentableType String // Type of the entity (e.g., "Stanza", "Poem", etc.)
  commentableId String   // ID of the entity
  
  // User who created the comment
  userId String
  user User @relation(fields: [userId], references: [id])
  
  // Relation to specific entities (polymorphic)
  stanza Stanza? @relation("StanzaComments", fields: [commentableId], references: [id])
  
  @@index([commentableType, commentableId])
}

model Follow {
  @@map("_UserFollows")
  A String
  B String
  @@id([A, B])
}

model Collection {
  @@map("collections")
  id String @id @default(cuid())
  userId String
  collectableId String
  collectableType String
  user User @relation(fields: [userId], references: [id]) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([collectableId, collectableType])
}
